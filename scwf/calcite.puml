@startuml

interface RelNode
abstract AbstractRelNode

RelNode <|-- AbstractRelNode
AbstractRelNode <|-- RelSubset
RelSubset *-- RelSet
VolcanoPlanner o-- RelSubset
VolcanoPlanner o-- RelNode

class RelSubset {
*初始生成是每个relnode生成一个RelSubset
RelOptCost bestCost
RelSet set
RelNode best
RelNode getBest()
void computeBestCost(RelOptPlanner planner)
}

class RelSet {
List<RelNode> rels
List<RelNode> parents
List<RelSubset> subsets
RelSet equivalentSet
RelNode rel
void addInternal(RelNode rel)
}

class VolcanoPlanner {
  RelSubset root
  RelNode originalRoot
  Set<RelOptRule> ruleSet
  IdentityHashMap<RelNode, RelSubset> mapRel2Subset
  RelOptCostFactory costFactory
  RuleQueue ruleQueue
  List<RelTraitDef> traitDefs

  boolean addRule(RelOptRule rule)
  void setRoot(RelNode rel)
  RelNode findBestExp()
}

Table <|-- ScannableTable
Table <|-- FilterableTable
Schema <|-- AbstractSchema
Schema <|-- SchemaPlus

interface Table {
  奇怪，居然不是继承自RelNode
  RelDataType getRowType(RelDataTypeFactory typeFactory);
  Statistic getStatistic();
  Schema.TableType getJdbcTableType();
}
interface ScannableTable {
 Enumerable<Object[]> scan(DataContext root)
}
interface FilterableTable {
Enumerable<Object[]> scan(DataContext root, List<RexNode> filters)
}

interface Schema {
Table getTable(String name)
Collection<Function> getFunctions(String name)
Schema getSubSchema(String name)
}

interface SchemaPlus {
  void add(String name, Table table)
  void add(String name, Function function)
  void add(String name, Lattice lattice)
  SchemaPlus add(String name, Schema schema)
  SchemaPlus getParentSchema()
  SchemaPlus getSubSchema(String name)
}

class AbstractSchema {
Map<String, Table> getTableMap()
}

Node <|-- TableScanNode
Node <|-- JoinNode
Node <|-- FilterNode
interface Node {
void run()
}
class TableScanNode {
}
class JoinNode {
}
class FilterNode {
}

RelNode <|-- AbstractRelNode
AbstractRelNode <|-- SingleRel
AbstractRelNode <|-- BiRel
BiRel <|-- Join
Join <|-- LogicalJoin
Join <|-- PigJoin
Join <|-- BindableJoin

SingleRel <|-- Filter
Filter <|-- LogicalFilter
Filter <|-- CassandraFilter
Filter <|-- BindableFilter
Filter <|-- MongoFilter

interface RelNode
abstract class AbstractRelNode
abstract class BiRel
class Join
class LogicalJoin
class PigJoin
class BindableJoin

abstract class SingleRel
abstract class Filter
class LogicalFilter
class CassandraFilter
class BindableFilter
class MongoFilter

@enduml

class CBO {
  凡是不一定能提升性能的rule都应该划到cbo中去考虑
  1. 逻辑计划之间的转换
  2. ensure requirement
  3. 逻辑计划转物理计划
}