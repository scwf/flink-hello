@startuml

interface RelNode {
List<RelNode> getInputs()
Convention getConvention()
RelDataType getRowType()
RelDataType getExpectedInputRowType(int ordinalInParent)
double estimateRowCount(RelMetadataQuery mq)
RelOptCost computeSelfCost(RelOptPlanner, RelMetadataQuery)
void register(RelOptPlanner planner)
RelNode onRegister(RelOptPlanner planner)
}

interface Converter {
RelTraitSet getInputTraits()
RelTraitDef getTraitDef()
RelNode getInput()
}

abstract AbstractRelNode {
RelTraitSet traitSet
Convention getConvention()
}

RelNode <|-- AbstractRelNode
RelNode <|-- Converter

AbstractRelNode <|-- RelSubset
RelSubset *-- RelSet
VolcanoPlanner o-- RelSubset
VolcanoPlanner o-- RelNode

class RelSubset {
*初始生成是每个relnode生成一个RelSubset
RelOptCost bestCost
RelSet set
RelNode best
RelNode getBest()
void computeBestCost(RelOptPlanner planner)
}

class RelSet {
List<RelNode> rels
List<RelNode> parents
List<RelSubset> subsets
RelSet equivalentSet
RelNode rel
void addInternal(RelNode rel)
}


AbstractRelNode <|-- SingleRel
AbstractRelNode <|-- BiRel
BiRel <|-- Join
Join <|-- LogicalJoin
Join <|-- PigJoin
Join <|-- BindableJoin

SingleRel <|-- Filter
Filter <|-- LogicalFilter
Filter <|-- CassandraFilter
Filter <|-- BindableFilter
Filter <|-- MongoFilter

interface RelNode
abstract class AbstractRelNode
abstract class BiRel
class Join
class LogicalJoin {
LogicalJoin create(...)
}
class PigJoin
class BindableJoin

abstract class SingleRel
abstract class Filter
class LogicalFilter {
LogicalFilter create(RelNode input, RexNode condition)
}
class CassandraFilter
class BindableFilter
class MongoFilter

RelTraitSet o-- RelTrait
RelTrait <|-- Convention
RelTrait <|-- RelCompositeTrait
interface RelTrait {
RelTraitDef getTraitDef()
boolean satisfies(RelTrait trait)
void register(RelOptPlanner planner)
}
interface Convention
class RelTraitSet {
RelTrait[] traits
}
abstract class RelTraitDef {
RelNode convert(RelOptPlanner planner,RelNode rel,T toTrait,...)
}

@enduml

@startuml

class VolcanoPlanner {
  RelSubset root
  RelNode originalRoot
  Set<RelOptRule> ruleSet
  IdentityHashMap<RelNode, RelSubset> mapRel2Subset
  RelOptCostFactory costFactory
  RuleQueue ruleQueue
  List<RelTraitDef> traitDefs

  boolean addRule(RelOptRule rule) // 添加rule的入口
  void setRoot(RelNode rel)
  void ensureRootConverters()
  RelSubset registerImpl(RelNode rel,RelSet set) // 会调用 fireRules
  void fireRules(RelNode rel,boolean deferred) // ruleCall.match(rel)-volcanoRuleCall.matchRecurse-DeferringRuleCall.onMatch, 将match添加到ruleQueue
  RelNode findBestExp()
}

class RuleQueue {
VolcanoRuleMatch popMatch(VolcanoPlannerPhase phase)
Map<VolcanoPlannerPhase, PhaseMatchList> matchListMap
}

class PhaseMatchList {
VolcanoPlannerPhase phase
List<VolcanoRuleMatch> list
Multimap<RelSubset, VolcanoRuleMatch> matchMap
}

enum VolcanoPlannerPhase {
  PRE_PROCESS_MDR
  PRE_PROCESS
  OPTIMIZE
  CLEANUP
}
RelOptRuleCall <|-- VolcanoRuleCall
VolcanoRuleCall <|-- VolcanoRuleMatch
PhaseMatchList o-- VolcanoRuleMatch
RuleQueue o-- PhaseMatchList
RuleQueue o-- VolcanoPlannerPhase
VolcanoPlanner o-- RuleQueue
RelOptRuleCall o-- RelOptRule
RelOptRuleCall o-- RelOptRuleOperand
RelOptRuleOperand o-- RelOptRule
RelOptRule o-- RelOptRuleOperand

abstract class RelOptRuleCall {
  final int id;
  final RelOptRuleOperand operand0;
  Map<RelNode, List<RelNode>> nodeInputs;
  final RelOptRule rule;
  final RelNode[] rels;
  final RelOptPlanner planner;
  final List<RelNode> parents;
}

abstract class RelOptRule {
RelOptRuleOperand operand

public boolean matches(RelOptRuleCall call)
}

class RelOptRuleOperand {
  RelOptRuleOperand parent
  RelOptRule rule
  Predicate<RelNode> predicate
  RelTrait trait
  Class<? extends RelNode> clazz
  ImmutableList<RelOptRuleOperand> children // rule 可能对孩子也有要求

  public boolean matches(RelNode rel) // 是否命中rule
}

class VolcanoRuleCall {
  VolcanoPlanner volcanoPlanner
}

class VolcanoRuleMatch {
  final RelSet targetSet
  RelSubset targetSubset
  String digest
  double cachedImportance = Double.NaN
}



@enduml

@startuml

Table <|-- ScannableTable
Table <|-- FilterableTable
Schema <|-- AbstractSchema
Schema <|-- SchemaPlus

interface Table {
  奇怪，居然不是继承自RelNode
  RelDataType getRowType(RelDataTypeFactory typeFactory);
  Statistic getStatistic();
  Schema.TableType getJdbcTableType();
}
interface ScannableTable {
 Enumerable<Object[]> scan(DataContext root)
}
interface FilterableTable {
Enumerable<Object[]> scan(DataContext root, List<RexNode> filters)
}

interface Schema {
Table getTable(String name)
Collection<Function> getFunctions(String name)
Schema getSubSchema(String name)
}

interface SchemaPlus {
  void add(String name, Table table)
  void add(String name, Function function)
  void add(String name, Lattice lattice)
  SchemaPlus add(String name, Schema schema)
  SchemaPlus getParentSchema()
  SchemaPlus getSubSchema(String name)
}

class AbstractSchema {
Map<String, Table> getTableMap()
}

Node <|-- TableScanNode
Node <|-- JoinNode
Node <|-- FilterNode
interface Node {
void run()
}
class TableScanNode {
}
class JoinNode {
}
class FilterNode {
}
@enduml



class CBO {
  凡是不一定能提升性能的rule都应该划到cbo中去考虑
  1. 逻辑计划之间的转换
  2. ensure requirement
  3. 逻辑计划转物理计划
}